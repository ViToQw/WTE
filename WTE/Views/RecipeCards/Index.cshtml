
@{
    ViewData["Title"] = "Рецепты";
}
<div id="recipeCardsApp" class="recipe_card_app" data-user-id="@ViewBag.id">
    <div class="div_filters">
        <div class="filters-container">
            <select class="filters" v-model="difficultyFilter">
                <option value="">Все сложности</option>
                <option value="Easy">Easy</option>
                <option value="Medium">Medium</option>
                <option value="Hard">Hard</option>
            </select>
            <select class="filters" v-model="timeFilter">
                <option value="">Все время</option>
                <option value="moreThan10">Более 10 минут</option>
                <option value="moreThan30">Более 30 минут</option>
                <option value="moreThan60">Более часа</option>
            </select>
            <select class="filters" v-model="ingredientCountFilter">
                <option value="">Все ингредиенты</option>
                <option value="moreThan3">Более 3 ингредиентов</option>

                <option value="moreThan5">Более 5 ингредиентов</option>
                <option value="moreThan10">Более 10 ингредиентов</option>
                <option value="moreThan15">Более 15 ингредиентов</option>
                <option value="moreThan20">Более 20 ингредиентов</option>
                <option value="moreThan25">Более 25 ингредиентов</option>
            </select>
        </div>
        <div class="filters-container">
            <input class="search" placeholder="Поиск" v-model="searchText" />
        </div>
        <div class="new_dish" v-if="userRole === 'admin'">
            <button class="button_orange" v-on:click="showModal = true" v-if="userRole === 'admin'">Добавить новое блюдо</button>
        </div>
        @* Избранное для пользователя *@
        <div class="filters-container">
            <button class="button_orange" v-if="userRole !== 'admin'" v-on:click="showFavorites">Избранные</button>
            <button class="button_orange" v-if="userRole !== 'admin'" v-on:click="showAllRecipes">Показать все блюда</button>
        </div>

    </div>
    <div class="recipe-cards">
        <div v-for="recipe in filteredRecipes" :key="recipe.id" class="recipe-card">
            <div class="recipe_card_white">

                <button class="favorite-button" v-on:click="toggleFavorite(recipe.id)">
                    <img v-if="recipe.isFavorite"  src="~/Content/Images/icons8-heart-red.png"  alt="Favorite Icon" class="favorite-icon">
                    <img v-else src="~/Content/Images/icons8-heart.png" alt="Favorite Icon" class="favorite-icon">
                </button>


                <h2 class="text_black">{{ recipe.title }}</h2>
                <img :src="recipe.imageUrl" alt="Фото блюда" class="recipe-photo" />
                <div class="buttons_card" v-if="userRole === 'admin'">
                    <button class="button_orange" v-on:click="openEditModal(recipe)">Изменить</button>
                    <button class="button_gray" v-on:click="deleteRecipe(recipe.id)">Удалить</button>
                </div>
               
            </div>

            <div class="recipe_card_gray">
                <p class="titel_paragraphe">Ингредиенты</p>
                <ol class="white_text_small">
                    <li v-for="ingredient in recipe.ingredients" :key="ingredient.id" class="list_style">
                        {{ ingredient.name }} -
                        {{ ingredient.quantity }}
                    </li>
                </ol>
                <p class="titel_paragraphe">Время приготовления</p>
                <p class="white_text_small">{{ Math.round(recipe.cookingTime / 60) }} минут</p>
                <p class="titel_paragraphe">Сложность</p>
                <p class="white_text_small">{{ recipe.difficulty }}</p>
                <p class="titel_paragraphe">Рецепт</p>
                <p class="white_text_small" id="instructions">{{ recipe.instructions }} </p>
            </div>
        </div>
    </div>
    <!-- Модальное окно -->
    <div class="modal" v-if="showModal">
        <div class="modal-content">
            <span class="close" v-on:click="showModal = false">&times;</span>
            <h1 class="text_black_modal">Добавление нового блюда</h1>
            <div class="modal-form">
                <div class="modal_card_white">
                    <input v-model="newRecipe.title" class="autorization_input_text" placeholder="Введите название нового блюда" />
                    <input v-model="newRecipe.imageUrl" class="autorization_input_text" placeholder="Введите URL фото блюда" />
                    <img :src="newRecipe.imageUrl" alt="Здесь будет ваше фото, после ввода URL" class="recipe-photo" />
                    <p class="text_black">Добавление нового ингредиента</p>
                    <input v-model="newIngredientName" class="new-ingredient-input" placeholder="Введите новый ингредиент" />
                    <button class="button_orange" v-on:click="addNewIngredient">Добавить новый ингредиент</button>
                </div>
                <div class="modal_card_gray">
                    <div class="input_modal_form">
                        <p class="text_white_modal">Выбор уровня сложности:</p>
                        <select v-model="newRecipe.difficulty" class="filters_modal">
                            <option value="Easy">Easy</option>
                            <option value="Medium">Medium</option>
                            <option value="Hard">Hard</option>
                        </select>
                        <p class="text_white_modal">Поле для ввода рецепта:</p>
                        <textarea v-model="newRecipe.instructions" class="recipe-instructions" placeholder="Введите рецепт здесь"></textarea>
                        <p class="text_white_modal">Время приготовления (в минутах):</p>
                        <input v-model.number="newRecipe.cookingTime" type="number" class="recipe-instructions" placeholder="Укажите время в минутах">
                        <p class="text_white_modal">Выберите ингредиенты для рецепта:</p>
                        <select v-model="selectedIngredient" class="filters_modal">
                            <option v-for="ingredient in ingredients" :value="ingredient">{{ ingredient.name }}</option>
                        </select>
                        <button v-on:click="addIngredient" class="add-ingredient-button">Добавить</button>
                    </div>
                    <div class="selected-ingredients">
                        <p class="text_white_modal" v-if="selectedIngredients.length === 0">Нет выбранных ингредиентов</p>
                        <ul v-else>
                            <li v-for="ingredient in selectedIngredients" :key="ingredient.id" class="text_white_modal">
                                {{ ingredient.name }}
                                <input v-model="ingredient.quantity" type="text" placeholder="Количество" class="ingredient-quantity" />
                                <button class="button_transparent" v-on:click="removeIngredient(ingredient)">Удалить</button>
                            </li>
                        </ul>
                    </div>
                    <button class="button_transparent" v-on:click="addNewRecipe">Добавить блюдо</button>
                </div>
            </div>
        </div>
    </div>
    <!-- Модальное окно изменения -->
    <div class="modal" v-if="showEditModal">
        <div class="modal-content">
            <span class="close" v-on:click="closeEditModal">&times;</span>
            <h1 class="text_black_modal">Изменение блюда</h1>
            <div class="modal-form">
                <div class="modal_card_white">
                    <input v-model="editedRecipe.title" class="autorization_input_text" placeholder="Введите название нового блюда" />
                    <input v-model="editedRecipe.imageUrl" class="autorization_input_text" placeholder="Введите URL фото блюда" />
                    <img :src="editedRecipe.imageUrl" alt="Здесь будет ваше фото, после ввода URL" class="recipe-photo" />
                    <p class="text_black">Добавление нового ингредиента</p>
                    <input v-model="newIngredientName" class="new-ingredient-input" placeholder="Введите новый ингредиент" />
                    <button class="button_orange" v-on:click="addNewIngredient">Добавить новый ингредиент</button>
                </div>
                <div class="modal_card_gray">
                    <div class="input_modal_form">
                        <p class="text_white_modal">Выбор уровня сложности:</p>
                        <select v-model="editedRecipe.difficulty" class="filters_modal">
                            <option value="Easy">Easy</option>
                            <option value="Medium">Medium</option>
                            <option value="Hard">Hard</option>
                        </select>
                        <p class="text_white_modal">Поле для ввода рецепта:</p>
                        <textarea v-model="editedRecipe.instructions" class="recipe-instructions" placeholder="Введите рецепт здесь"></textarea>
                        <p class="text_white_modal">Время приготовления (в минутах):</p>
                        <input v-model.number="editedRecipe.cookingTime" type="number" class="recipe-instructions" placeholder="Укажите время в минутах">
                        <p class="text_white_modal">Выберите ингредиенты для рецепта:</p>
                        <select v-model="selectedIngredient" class="filters_modal">
                            <option v-for="ingredient in ingredients" :value="ingredient">{{ ingredient.name }}</option>
                        </select>
                        <button v-on:click="addIngredient" class="button_transparent">Добавить</button>
                    </div>
                    <div class="selected-ingredients">
                        <p class="text_white_modal" v-if="selectedIngredients.length === 0">Нет выбранных ингредиентов</p>
                        <ul v-else>
                            <li v-for="ingredient in selectedIngredients" :key="ingredient.id" class="text_white_modal">
                                {{ ingredient.name }}
                                <input v-model="ingredient.quantity" type="text" placeholder="Количество" class="ingredient-quantity" />
                                <button class="button_transparent" v-on:click="removeIngredient(ingredient)">Удалить</button>
                            </li>
                        </ul>
                    </div>
                    <button class="button_transparent" v-on:click="updateRecipe">Изменить блюдо</button>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
<script src="https://unpkg.com/vue@next"></script>
<script>
   //добавила
    const userId = @ViewBag.id;
    // const userId = @Html.Raw(Json.Serialize(ViewBag.id));

    const recipeCardsApp = Vue.createApp({
        data() {
            return {
                recipes: [],
                filteredRecipes: [],
                searchText: '',
                ingredientCountFilter: '',
                difficultyFilter: '',
                timeFilter: '',
                showModal: false,
                newRecipe: {
                    title: '',
                    imageUrl: '',
                    cookingTime: null,
                    difficulty: '',
                    instructions: '',
                    ingredients: []
                },
                ingredients: [],
                selectedIngredient: null, 
                newIngredientName: '',
                selectedIngredients: [], 
                showEditModal: false,
                editedRecipe: null,
                availableIngredients: [],

                userRole: '',
                userId: userId,

                user: {
                    id: null,
                    name: '',
                    phone: '',
                    createdAt: '',
                    password: '',
                    imageUrl: '',
                    admin: true // Добавляем поле admin для хранения роли
                },
                // Для избранного
                favorites: [],
                showAll: true


            };
        },
        methods: {
            fetchRecipes() {
                axios.get('http://hnt8.ru:8222/recipe')
                    .then(response => {
                        console.log('Response from API:', response.data);
                        this.recipes = response.data;
                        this.filterRecipes();
                    })
                    .catch(error => {
                        console.error('Ошибка при получении данных о рецептах:', error);
                    });

                axios.get('http://hnt8.ru:8222/ingredient')
                    .then(response => {
                        console.log('Список ингредиентов:', response.data);
                        this.ingredients = response.data;
                    })
                    .catch(error => {
                        console.error('Ошибка при получении списка ингредиентов:', error);
                    });
            },

            

            fetchUserData() {
       
                return axios.get('http://hnt8.ru:8222/account')
                    .then(response => {
                        console.log('User data from API:', response.data);
                        if (Array.isArray(response.data)) {
                            const userData = response.data.find(user => user.id == this.userId);
                            if (userData) {
                                this.user = userData;
                                this.userRole = userData.admin ? 'admin' : 'user';
                                console.log('User admin status:', this.user.admin);
                            } else {
                                console.error('Пользователь с указанным id не найден');
                            }
                        } else {
                            console.error('Неожиданный формат данных:', response.data);
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка при получении данных с сервера:', error);
                    });
            },
            //добавила 
            saveUserId(userId) {
                this.userId = userId;
                this.fetchUserData()
                    .then(() => {
                        console.log('Данные о пользователе успешно загружены');
                        this.resetApp(); // Перезапускаем приложение после загрузки данных о пользователе
                    })
                    .catch(error => {
                        console.error('Ошибка при загрузке данных о пользователе:', error);
                    });
            },
            resetApp() {
                this.fetchRecipes();
                this.filterRecipes();
            },


            filterRecipes() {
                let filtered = this.recipes;
                if (this.difficultyFilter) {
                    filtered = filtered.filter(recipe => recipe.difficulty === this.difficultyFilter);
                }
                if (this.timeFilter) {
                    switch (this.timeFilter) {
                        case 'moreThan10':
                            filtered = filtered.filter(recipe => recipe.cookingTime > 10 * 60);
                            break;
                        case 'moreThan30':
                            filtered = filtered.filter(recipe => recipe.cookingTime > 30 * 60);
                            break;
                        case 'moreThan60':
                            filtered = filtered.filter(recipe => recipe.cookingTime > 60 * 60);
                            break;
                    }
                }
                if (this.ingredientCountFilter) {
                    switch (this.ingredientCountFilter) {
                        case 'moreThan3':
                            filtered = filtered.filter(recipe => recipe.ingredients.length > 3);
                            break;
                        case 'moreThan5':
                            filtered = filtered.filter(recipe => recipe.ingredients.length > 5);
                            break;
                        case 'moreThan10':
                            filtered = filtered.filter(recipe => recipe.ingredients.length > 10);
                            break;
                        case 'moreThan15':
                            filtered = filtered.filter(recipe => recipe.ingredients.length > 15);
                            break;
                        case 'moreThan20':
                            filtered = filtered.filter(recipe => recipe.ingredients.length > 20);
                            break;
                        case 'moreThan25':
                            filtered = filtered.filter(recipe => recipe.ingredients.length > 25);
                            break;
                    }
                }
                if (this.searchText) {
                    const searchTextLC = this.searchText.toLowerCase().trim();
                    filtered = filtered.filter(recipe => {
                        const titleLC = recipe.title ? recipe.title.toLowerCase() : '';
                        return titleLC.includes(searchTextLC);
                    });
                }
                this.filteredRecipes = filtered;
            },
            addNewRecipe() {
                if (this.newRecipe.title && this.newRecipe.imageUrl && this.newRecipe.cookingTime && this.newRecipe.difficulty && this.newRecipe.instructions && this.newRecipe.ingredients.length > 0) {
                    this.newRecipe.cookingTime = this.minutesToSeconds(this.newRecipe.cookingTime);
                    axios.post('http://hnt8.ru:8222/recipe', this.newRecipe)
                        .then(response => {
                            console.log('Блюдо успешно добавлено:', response.data);
                            this.fetchRecipes();
                            this.showModal = false;
                            this.newRecipe = {
                                title: '',
                                imageUrl: '',
                                cookingTime: null,
                                difficulty: '',
                                instructions: '',
                                ingredients: []
                            };
                            this.selectedIngredients = [];
                        })
                        .catch(error => {
                            console.error('Ошибка при добавлении блюда:', error);
                        });
                } else {
                    alert('Пожалуйста, заполните все поля');
                }
            },
            deleteRecipe(recipeId) {
                axios.delete(`http://hnt8.ru:8222/recipe?id=${recipeId}`)
                    .then(response => {
                        console.log('Рецепт успешно удален:', response.data);
                        this.fetchRecipes();
                    })
                    .catch(error => {
                        console.error('Ошибка при удалении рецепта:', error);
                    });
            },
            addNewIngredient() {
                if (this.newIngredientName) {
                    axios.post('http://hnt8.ru:8222/ingredient', { name: this.newIngredientName })
                        .then(response => {
                            console.log('Новый ингредиент успешно добавлен:', response.data);
                            this.newIngredientName = ''; // Очистка поля ввода
                            this.fetchIngredients();
                        })
                        .catch(error => {
                            console.error('Ошибка при добавлении нового ингредиента:', error);
                        });
                } else {
                    alert('Пожалуйста, введите название нового ингредиента');
                }
            },
            fetchIngredients() {
                axios.get('http://hnt8.ru:8222/ingredient')
                    .then(response => {
                        console.log('Список ингредиентов:', response.data);
                        this.ingredients = response.data.filter(ingredient => !this.newRecipe.ingredients.some(selected => selected.id === ingredient.id));
                    })
                    .catch(error => {
                        console.error('Ошибка при получении списка ингредиентов:', error);
                    });
            },
            updateFilteredIngredients() {
                this.filteredIngredients = this.ingredients.filter(ingredient => !this.selectedIngredients.some(selected => selected.id === ingredient.id));
            },
            addIngredient() {
                if (this.selectedIngredient) {
                    const ingredientWithQuantity = { ...this.selectedIngredient, quantity: 1 };
                    this.selectedIngredients.push(ingredientWithQuantity);
                    this.newRecipe.ingredients.push(ingredientWithQuantity); // Добавляем ингредиент в newRecipe.ingredients
                    this.selectedIngredient = null;
                    this.updateFilteredIngredients(); // Обновляем список доступных ингредиентов
                }
            },
            removeIngredient(ingredientToRemove) {
                const index = this.selectedIngredients.findIndex(ingredient => ingredient.id === ingredientToRemove.id);
                if (index !== -1) {
                    this.selectedIngredients.splice(index, 1);
                }
                const indexInRecipe = this.editedRecipe.ingredients.findIndex(ingredient => ingredient.id === ingredientToRemove.id);
                if (indexInRecipe !== -1) {
                    this.editedRecipe.ingredients.splice(indexInRecipe, 1);
                }
                this.updateFilteredIngredients(); // Обновляем список доступных ингредиентов
            },
            minutesToSeconds(minutes) {
                return minutes * 60;
            },
            secondsToMinutes(seconds) {
                return seconds / 60;
            },
            openEditModal(recipe) {
                this.editedRecipe = { ...recipe };
                this.editedRecipe.cookingTime = this.secondsToMinutes(recipe.cookingTime);
                this.showEditModal = true;
                this.selectedIngredients = this.editedRecipe.ingredients.map(ingredient => ({ ...ingredient }));
                this.fetchIngredients();
            },
            closeEditModal() {
                this.editedRecipe = null;
                this.showEditModal = false;
            },
            updateEditedIngredients() {
                this.editedRecipe.ingredients = [];
                this.selectedIngredients.forEach(ingredient => {
                    const editedIngredient = { ...ingredient };
                    if (!editedIngredient.quantity) {
                        delete editedIngredient.quantity;
                    }
                    this.editedRecipe.ingredients.push(editedIngredient);
                });
            },
            updateRecipe() {
                console.log('Метод updateRecipe вызван');
                console.log('editedRecipe:', this.editedRecipe);

                if (!this.editedRecipe.id) {
                    console.error('ID рецепта отсутствует');
                    return;
                }

                if (this.editedRecipe.title && this.editedRecipe.imageUrl && this.editedRecipe.cookingTime && this.editedRecipe.difficulty && this.editedRecipe.instructions && this.editedRecipe.ingredients.length > 0) {

                    this.updateEditedIngredients();
                    const recipeData = {
                        ...this.editedRecipe,
                        cookingTime: this.minutesToSeconds(this.editedRecipe.cookingTime)
                    };
                    console.log('Отправляемые данные:', recipeData);
                    const url = `http://hnt8.ru:8222/recipe`; // Используем id рецепта для обновления
                    console.log('URL для запроса:', url);
                    axios.put(url, recipeData)
                        .then(response => {
                            console.log('Блюдо успешно изменено:', response.data);
                            this.showEditModal = false;
                            this.fetchRecipes();
                        })
                        .catch(error => {
                            console.error('Ошибка при изменении блюда:', error);
                            if (error.response) {
                                console.error('Детали ошибки:', error.response.data);
                            }
                        });
                } else {
                    alert('Пожалуйста, заполните все поля');
                }
            },

            // Избранное
            showFavorites() {
                this.filteredRecipes = this.recipes.filter(recipe => this.favorites.includes(recipe.id));
                this.showAll = false; // Обновляем флаг отображения
            },
            showAllRecipes() {
                this.filteredRecipes = this.recipes;
                this.showAll = true; // Обновляем флаг отображения
            },
            fetchFavorites() {
                axios.get(`http://hnt8.ru:8222/favorites/${this.userId}/recipes`)
                    .then(response => {
                        console.log('Избранные рецепты:', response.data);
                        this.favorites = response.data.map(favorite => favorite.recipeGetDTO.id);
                        this.filterRecipes(); // Фильтруем рецепты после загрузки избранных
                    })
                    .catch(error => {
                        console.error('Ошибка при получении избранных рецептов:', error);
                    });
            },
            toggleFavorite(recipeId) {
                const isCurrentlyFavorite = this.isFavorite(recipeId);
                const url = `http://hnt8.ru:8222/favorites/${this.userId}/recipes/${recipeId}`;
                if (isCurrentlyFavorite) {
                    axios.delete(url)
                        .then(response => {
                            console.log('Рецепт удален из избранного:', response.data);
                            this.removeFavoriteLocally(recipeId);
                        })
                        .catch(error => {
                            console.error('Ошибка при удалении рецепта из избранного:', error);
                        });
                } else {
                    axios.post(url)
                        .then(response => {
                            console.log('Рецепт добавлен в избранное:', response.data);
                            this.addFavoriteLocally(recipeId);
                        })
                        .catch(error => {
                            console.error('Ошибка при добавлении рецепта в избранное:', error);
                        });
                }
            },
           
            updateRecipeFavorites() {
                this.recipes.forEach(recipe => {
                    recipe.isFavorite = this.isFavorite(recipe.id);
                });
                this.filterRecipes();
            },
            loadFavorites() {
                axios.get(`http://hnt8.ru:8222/favorite/${this.userId}`)
                    .then(response => {
                        this.favorites = response.data.map(favorite => favorite.recipeId);
                        this.updateRecipeFavorites();
                    })
                    .catch(error => {
                        console.error('Ошибка при получении избранных рецептов:', error);
                    });
            },


            isFavorite(recipeId) {
                return this.favorites.includes(recipeId);
            },
            addFavoriteLocally(recipeId) {
                this.favorites.push(recipeId);
                this.filterRecipes(); // Обновляем список рецептов после изменения избранного
            },
            removeFavoriteLocally(recipeId) {
                const index = this.favorites.indexOf(recipeId);
                if (index !== -1) {
                    this.favorites.splice(index, 1);
                    this.filterRecipes(); // Обновляем список рецептов после изменения избранного
                }
            }
            
        },
        created() {
            this.fetchUserData().then(() => {
                this.fetchRecipes();
                this.loadFavorites();
            });
        },

        watch: {
            searchText() {
                this.filterRecipes();
            },
            difficultyFilter() {
                this.filterRecipes();
            },
            timeFilter() {
                this.filterRecipes();
            },
            ingredientCountFilter() {
                this.filterRecipes();
            }
        },
        mounted() {
            this.fetchRecipes();
            this.fetchUserData();
            //добавила для ассинхронный запрос
            Promise.all([this.fetchRecipes(), this.fetchUserData()])
                .then(() => {
                    console.log('Все данные успешно загружены');

                })
                .catch(error => {
                    console.error('Ошибка при загрузке данных:', error);
                });


        }
    });
    recipeCardsApp.component('recipe-card', {
        props: ['recipe', 'isAdmin'],
        template: ` <div class="recipe-card">
                            <h3>{{ recipe.title }}</h3>
                            <img :src="recipe.imageUrl" alt="Recipe Image">
                            <p>Time: {{ recipe.cookingTime / 60 }} minutes</p>
                            <p>Difficulty: {{ recipe.difficulty }}</p>
                            <p>Instructions: {{ recipe.instructions }}</p>
                            <ul>
                                <li v-for="ingredient in recipe.ingredients" :key="ingredient.id">
                                    {{ ingredient.name }} - {{ ingredient.quantity }}
                                </li>
                            </ul>
                            <div v-if="isAdmin">
                                    <button v-on:click="$emit('edit', recipe)">Edit</button>
                                    <button v-on:click="$emit('delete', recipe.id)">Delete</button>
                            </div>
                        </div>
                `
    });
    
    recipeCardsApp.mount("#recipeCardsApp");
</script>


<style>
    .filters_modal{
        background: #FAFAFA;
        font-family: Raleway;
        font-size: 16px;
        height: 40px;
        text-wrap: wrap;
        display: flex;
        width: 200px;
        text-align: center;
        border: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    /* Стили для модального окна */
    .modal {
        display: flex;
        justify-content: center; /* Выравнивание контента по центру по горизонтали */
        align-items: center; /* Выравнивание контента по центру по вертикали */
        position: fixed; /* Фиксированное позиционирование, чтобы модальное окно оставалось на месте, даже если страница прокручивается */
        z-index: 1; /* Позиция модального окна над всеми остальными элементами */
        left: 0;
        top: 0;
        width: 100%; /* Модальное окно занимает всю ширину экрана */
        height: 100%; /* Модальное окно занимает всю высоту экрана */
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4); /* Полупрозрачный черный цвет фона, чтобы создать эффект затемнения фона */
    }

    /* Стили для контента модального окна */
    .modal-content {
        background-color: #fefefe; /* Белый фон */
        padding: 20px;
        border: 1px solid #888;
        width: 80%; /* Ширина модального окна */
    }

    .modal-form {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        background: #FAFAFA; /* Выравнивание элементов внутри формы по горизонтали */
    }

    /* Стили для кнопки закрытия модального окна */
    .close {
        color: #aaa; /* Серый цвет текста */
        float: right; /* Выравнивание кнопки закрытия справа */
        font-size: 28px;
        font-weight: bold;
        padding-left: 10px
    }

    .text_black_modal {
        justify-content: space-between;
        text-decoration: none;
        display: block;
        color: #000000;
        font-family: Raleway;
        font-size: 28px;
        text-align: left;
        margin-top: 20px;
        margin-bottom: 20px;
        font-weight: bold 300;
        text-align: center;
    }

    .modal_card_white {
        width: 300px;
        height: 500px;
        background: #FAFAFA;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        padding: 24px;
    }

    .modal_card_gray {
        width: 600px;
        height: 500px;
        background: #262626;
        opacity: 85%;
        padding: 24px;
        flex-wrap: wrap;
        display: flex;
        color: #FFFFFF;
    }

        .close:hover,
        .close:focus {
            color: black; /* Изменение цвета текста при наведении курсора или фокусе */
            text-decoration: none; /* Удаление подчеркивания при наведении курсора или фокусе */
            cursor: pointer; /* Изменение курсора при наведении на кнопку */
        }

    .text_black {
        justify-content: space-between;
        text-decoration: none;
        display: inline-block;
        color: #000000;
        font-family: Raleway;
        font-size: 28px;
        text-align: left;
        margin-top: 60px;
        font-weight: bold 300;
    }

    .buttons_card {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .list_style {
        margin-left: 18px;
    }

    .titel_paragraphe {
        font-family: Raleway;
        font-size: 25px;
        font-weight: bold 300;
        color: #FFFFFF;
    }

    .white_text_small {
        font-family: Raleway;
        font-size: 17px;
        color: #FFFFFF;
        margin-top: 10px;
        margin-bottom: 10px;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    #instructions {
        white-space: nowrap;
    }

    .recipe_card_app {
        background: #FAFAFA;
    }

    .div_search {
        margin-left: 72px;
        margin-top: 91px;
        width: calc(100% - 72px);
    }

    .search {
        background: #FAFAFA;
        font-family: Raleway;
        font-size: 18px;
        height: 56px;
        text-align: center;
        border: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        /*         width: calc(100% - 16px); */
        width: 520px;
    }

    .div_filters {
        display: flex;
        flex-wrap: wrap;
        gap: 24px;
        margin-left: 72px;
        padding-top: 24px;
    }

    .filters-container {
        display: flex;
        gap: 16px;
    }

    .button_orange {
        font-family: Raleway;
        font-size: 18px;
        background-color: #E07901;
        color: #FFFFFF;
        border: none;
        width: 145px;
        height: 56px;
        position: relative;
        overflow: hidden;
        text-align: center;
        transition: transform.2s;
    }

        .button_orange:hover {
            transform: scale(1.1);
        }

    .button_gray {
        font-family: Raleway;
        font-size: 18px;
        /*  background-color: transparent;
            border: 2px solid #FFFFFF; */
        color: #FFFFFF;
        background: #262626;
        opacity: 85%;
        width: 145px;
        height: 56px;
        position: relative;
        overflow: hidden;
        text-align: center;
        transition: transform.2s;
        margin-top: auto;
    }

        .button_gray:hover {
            transform: scale(1.1);
        }

    .recipe_card_white {
        width: 300px;
        height: 400px;
        background: #FAFAFA;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-between;
        padding: 24px;
    }

    .recipe_card_gray {
        width: 270px;
        height: 400px;
        background: #262626;
        opacity: 85%;
        padding: 24px;
        color: #FFFFFF;
    }

    .recipe-cards {
        display: flex;
        flex-wrap: wrap;
        gap: 30px;
        margin: 80px 20px 80px 60px;
    }

    .recipe-card {
        display: flex;
        flex-wrap: wrap;
        margin-bottom: 24px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .filters {
        background: #FAFAFA;
        font-family: Raleway;
        font-size: 18px;
        height: 56px;
        width: 200px;
        text-align: center;
        border: none;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .recipe-photo {
        width: 100%;
        max-height: 200px;
        object-fit: cover;
        margin-bottom: 16px;
    }

    .recipe-instructions{
        border-style: solid;
        border-color: #B7B7B7;
        background-color: #FAFAFA;
        font-size: 16px;
        font-family: Raleway;
        text-align: center;
        text-align: left;
        width: 200px;
        height: 56px;
    }

    .text_white_modal{
        text-decoration: none;
        color: #FFFFFF;
        font-family: Raleway;
        font-size: 16px;
        margin-bottom:10px;
    }

    .selected-ingredients{
        height:auto;
        overflow-y: scroll;
    }

    .favorite-button {
    background: none;
    border: none;
    cursor: pointer;
    font-size: 24px;
    right: 10px;
    top: 10px;
    }

</style>

<link href="/css/site.css" rel="stylesheet" />

@inject Microsoft.Extensions.Configuration.IConfiguration Configuration 
@{
    Configuration["IsAutorization"] = "true";
}
